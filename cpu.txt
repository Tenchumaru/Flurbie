Op Codes
========

Register Op Codes
-----------------

There are fourteen of them:
add, addc, sub, subb, mul, umul, div, udiv, and, nand, or, nor, xor, xnor

Addressing modes:
register-register:  op tr, lr, rr (with optional shift)
register-immediate:  op tr, lr, value

Memory Op Codes
---------------

There are four of them:
ld, ldi, ori, st

Special Op Codes
----------------

There is only one so far:
cx

Patterns
--------

31      1       instruction active if CNVZ mask with CNVZ flags is non-zero
        0       instruction active if CNVZ mask with CNVZ flags is zero
30      C mask
29      N mask
28      V mask
27      Z mask
26-23   op code (add, addc, sub, subb, mul, umul, div, udiv, and, nand, or, nor, xor, xnor, MEM, SPECIAL)

standard:
22-18   target register (tr, 0-31)
17      right source
        0       immediate
        1       register
16-12   left register (lr, 0-31)

immediate right source:  tr= lr op value
11-0    12-bit value sign-extended to 32 bits

register right source:  tr= lr op (rr shop value)
11-7    right register (rr, 0-31)
6-5     shift operation
        00      add -16 to 15
        01      left
        10      logical right
        11      arithmetic right
4-0     5-bit value (0-31)

MEM:
22-18   target register (tr, 0-31)
17      source
        0       immediate
        1       memory

immediate source:
16      0       load immediate (ldi):  tr= sign-extended value
        1       XOR immediate high (xorih):  tr xor= value << 16
15-0    16-bit value

memory source:
16-12   left register (lr, 0-31)
11      0       load (ld):  tr= *(lr + value)
        1       store (st):  *(tr + value)= lr
10-0    11-bit value sign-extended to 32 bits

SPECIAL:  tr= *lr; if(tr == cr) *lr= rr;
22-18   target register (tr, 0-31)
17      unused
16-12   left register (lr, 0-31)
11-7    right register (rr, 0-31)
6-2     compare register (cr, 0-31)
1-0     unused

r31 is flags (User mode is in bit 31, CNVZ are in bits 30-27)
r30 is IP (instruction pointer)
r29 is SP (stack pointer; by convention)
r28 is FP (frame pointer; by convention)
r0 is always zero
Supervisor mode has its own copies of r16 through r30, sharing r31 with user mode.
Consider having supervisor mode see user mode's r17 through r30 in its r1
through r14 with its own copies of r15 through r30.  r0 is still always zero.

Operation Forms
---------------                                                   target  left  op   right  shop  value    rd_mem  wr_mem
immediate right source:  tr= lr op (R0 + value12)                 tr      lr    op   R0     +     value12  0       0
register right source:   tr= lr op (rr shop value5)               tr      lr    op   rr     shop  value5   0       0
ldi:                     tr= R0 | (R0 + value15)                  tr      R0    |    R0     +     value15  0       0
xorih:                   tr= tr xor (R0 + value15 << 16)          tr      tr    xor  R0     +     v15<<16  0       0
ld:                      tr= *(lr + value11)                      tr      lr         R0     <<    value11  1       0
store:                   *(tr + value11)= lr                      tr      lr         R0     <<    value11  0       1
SPECIAL:                 tr= *lr;                                 tr      lr    |    R0     <<    cr       1       1
                         if(tr == cr) *(lr + 0)= rr | (R0 << 0);  lr      rr    |    R0     <<    cr       1       1


Translation and Caching
-----------------------

To cover 29 bits of address space, translate 14 bits and cache 15 bits.
The cache line width is 8 words (256 bits).
The top 5 bits of the rest of the 32 bits of address space must be zero.

Translation:  16384 (2^14) words of memory and 14 bits per word.
Caching:  1024 (2^10) words of memory and 273 (2^(5 + 3) + 32 - 10 - 5) bits per word.


Other Instructions
------------------

ldd:    load double (load two registers with a 64-bit quantity)
ldtt:   load translation table
ldx:    load from exception register

I can implement these as SPECIAL by having CX active if bit 17 is zero and the
above selected by by bits 1 and 0 when bit 17 is one.  This leaves room for one
more special instruction.

A Possibly Simpler Alternative
------------------------------

Operation
31-28    op code (add, addc, sub, subb, mul, umul, div, udiv, and, nand, or, nor, xor, xnor, cx, F)

Destination
27      0       register
        1       memory
26-22    register index (0-31)

Source
21      0       register
        1       memory

Register
20      0       unconditional
        1       conditional
19-15           register index (0-31)
14-10           register index (0-31)

Unconditional
9-8     shift operation
        00      add -16 to 15
        01      left
        10      logical right
        11      arithmetic right
7-3     5-bit value (0-31)
2-0     unused

Conditional
9       1       instruction active if CNVZ mask with CNVZ flags is non-zero
        0       instruction active if CNVZ mask with CNVZ flags is zero
8       C mask
7       N mask
6       V mask
5       Z mask
4-0     unused

Memory
20      0       instruction (immediate)
        1       data (addressed)

Instruction
19      0       load low
        1       load high
18-0    19-bit signed value

Data
19-15   register index (0-31)
14-0    13-bit signed value
